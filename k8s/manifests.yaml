---
apiVersion: v1
kind: Namespace
metadata:
  name: greymatter
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: edge-tomato
  namespace: greymatter
spec:
  replicas: 1
  selector:
    matchLabels:
      greymatter.io/cluster: edge-tomato
  template:
    metadata:
      labels:
        greymatter.io/cluster: edge-tomato
    spec:
      containers:
        - name: sidecar
          image: quay.io/greymatterio/gm-proxy:1.7.3
          imagePullPolicy: Always
          ports:
          - containerPort: 10809
            name: proxy
          env:
            - name: XDS_CLUSTER
              value: edge-tomato
            - name: ENVOY_ADMIN_LOG_PATH
              value: /dev/stdout
            - name: PROXY_DYNAMIC
              value: "true"
            - name: XDS_ZONE
              value: default-zone
            - name: XDS_HOST
              value: controlensemble.greymatter.svc.cluster.local
            - name: XDS_PORT
              value: "50000"
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 128Mi
      imagePullSecrets:
      - name: gm-docker-secret
---
apiVersion: v1
kind: Service
metadata:
  name: edge-tomato
  namespace: greymatter
spec:
  ports:
  - name: ingress
    port: 10809
    protocol: TCP
    targetPort: 10809
  selector:
    greymatter.io/cluster: edge-tomato
  type: LoadBalancer

---
apiVersion: v1
data:
  index.html: I'm an API in the greymatter.io mesh!
kind: ConfigMap
metadata:
  name: apple-web
  namespace: greymatter
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: apple
  namespace: greymatter
  annotations:
    greymatter.io/inject-sidecar-to: "8080"
spec:
  selector:
    matchLabels:
      app: apple
  template:
    metadata:
      labels:
        app: apple
    spec:
      containers:
        - name: apple
          image: python:3
          command: ["python"]
          args: ["-m", "http.server", "8080", "--directory", "web"]
          volumeMounts:
            - name: web-volume
              mountPath: /web
      volumes:
        - name: web-volume
          configMap:
            name: apple-web

---
apiVersion: v1
data:
  index.html: I'm an API in the greymatter.io mesh!
kind: ConfigMap
metadata:
  name: banana-web
  namespace: greymatter
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: banana
  namespace: greymatter
  annotations:
    greymatter.io/inject-sidecar-to: "8080"
spec:
  selector:
    matchLabels:
      app: banana
  template:
    metadata:
      labels:
        app: banana
    spec:
      containers:
        - name: banana
          image: python:3
          command: ["python"]
          args: ["-m", "http.server", "8080", "--directory", "web"]
          volumeMounts:
            - name: web-volume
              mountPath: /web
      volumes:
        - name: web-volume
          configMap:
            name: banana-web

---
apiVersion: v1
data:
  index.html: I'm an API in the greymatter.io mesh!
kind: ConfigMap
metadata:
  name: lettuce-web
  namespace: greymatter
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lettuce
  namespace: greymatter
  annotations:
    greymatter.io/inject-sidecar-to: "8080"
spec:
  selector:
    matchLabels:
      app: lettuce
  template:
    metadata:
      labels:
        app: lettuce
    spec:
      containers:
        - name: lettuce
          image: python:3
          command: ["python"]
          args: ["-m", "http.server", "8080", "--directory", "web"]
          volumeMounts:
            - name: web-volume
              mountPath: /web
      volumes:
        - name: web-volume
          configMap:
            name: lettuce-web

---
apiVersion: v1
data:
  index.html: I'm an API in the greymatter.io mesh!
kind: ConfigMap
metadata:
  name: tomato-web
  namespace: greymatter
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tomato
  namespace: greymatter
  annotations:
    greymatter.io/inject-sidecar-to: "8080"
spec:
  selector:
    matchLabels:
      app: tomato
  template:
    metadata:
      labels:
        app: tomato
    spec:
      containers:
        - name: tomato
          image: python:3
          command: ["python"]
          args: ["-m", "http.server", "8080", "--directory", "web"]
          volumeMounts:
            - name: web-volume
              mountPath: /web
      volumes:
        - name: web-volume
          configMap:
            name: tomato-web

